#!/usr/bin/env python2
# -*- coding: utf-8-*-

import os
import sys
import logging
import yaml
import argparse

# HACK: remove this away and use virtualenv!
sys.path.append(os.path.sep.join(os.path.dirname(os.path.abspath(__file__)).split(os.path.sep)[:-1]))

from jessy import Jessy
from jessy import jasperpath
from jessy import diagnose

# Add jasperpath.LIB_PATH to sys.path
sys.path.append(jasperpath.LIB_PATH)


def get_args():
    '''
    Get CLI args
    '''
    parser = argparse.ArgumentParser(description='Jessy Voice Control Center')
    parser.add_argument('-r', '--run', action="store_true", help='Start Jessy')
    parser.add_argument('-l', '--local', action='store_true',
                        help='Use text input instead of a real microphone')
    parser.add_argument('-n ', '--no-network-check', action='store_true',
                        help='Disable the network connection check')
    parser.add_argument('-g', '--diagnose', action='store_true',
                        help='Run diagnose and exit')
    parser.add_argument('-d', '--debug', action='store_true', help='Show debug messages')
    parser.add_argument('-s', '--stt', action='store_true', help='List speech to text (STT) engines available')
    parser.add_argument('-t', '--tts', action="store_true", help='List text to speech (TTS) engines available')

    return parser.parse_args()


if __name__ == "__main__":
    if len(sys.argv) == 1:
        sys.argv.append('-h')

    args = get_args()

    logging.basicConfig()
    log = logging.getLogger()
    log.getChild("jessy.stt").setLevel(logging.INFO)

    if args.debug:
        log.setLevel(logging.DEBUG)

    if not args.no_network_check and not diagnose.check_network_connection():
        log.warning("Network not connected. This may prevent Jessy from running properly.")

    if args.diagnose:
        sys.exit(diagnose.run() or 1)

    try:
        jessy = Jessy()
        if args.run:
            if args.local:
                from jessy.local_mic import Mic
            else:
                from jessy.mic import Mic
            jessy.initialize().run()
        else:
            def print_mods(namespaces):
                '''
                Print modules
                '''
                out = []
                for num, mod in enumerate(namespaces):
                    out.append("  {0}. {1}".format(num + 1, mod.split(".")[-1]))
                return '\n'.join(out)

            if args.stt:
                print "Available STT engines:\n\n{0}\n".format(print_mods(jessy.get_stt_modules()))

            if args.tts:
                print "Available TTS engines:\n\n{0}\n".format(print_mods(jessy.get_tts_modules()))

    except Exception:
        log.error("Error occured!", exc_info=True)
        sys.exit(1)
