#!/usr/bin/env python2
# -*- coding: utf-8-*-

import os
import sys
import shutil
import logging

import yaml
import argparse

# HACK: remove this away and use virtualenv!
sys.path.append(os.path.sep.join(os.path.dirname(os.path.abspath(__file__)).split(os.path.sep)[:-1]))

from jessy import tts
from jessy import stt
from jessy import jasperpath
from jessy import diagnose
from jessy.conversation import Conversation
from jessy.lazyload import LazyLoad


# Add jasperpath.LIB_PATH to sys.path
sys.path.append(jasperpath.LIB_PATH)

parser = argparse.ArgumentParser(description='Jessy Voice Control Center')
parser.add_argument('-r', '--run', action="store_true", help='Start Jessy')
parser.add_argument('-l', '--local', action='store_true',
                    help='Use text input instead of a real microphone')
parser.add_argument('-n ', '--no-network-check', action='store_true',
                    help='Disable the network connection check')
parser.add_argument('-g', '--diagnose', action='store_true',
                    help='Run diagnose and exit')
parser.add_argument('-d', '--debug', action='store_true', help='Show debug messages')
parser.add_argument('-t', '--stt', action='store_true', help='List speech to text (STT) engines available')
parser.add_argument('-s', '--tts', action="store_true", help='List text to speech (TTS) engines available')

args = parser.parse_args()

if args.local:
    from jessy.local_mic import Mic
else:
    from jessy.mic import Mic


class Jessy(object):
    '''
    Main class.
    '''
    def __init__(self):
        self._logger = logging.getLogger(__name__)
        self._stt = LazyLoad().scan('jessy.stt')
        self._tts = LazyLoad().scan('jessy.tts')

    def get_stt_modules(self):
        '''
        Return available STT modules.
        '''
        return self._stt.modules()

    def get_tts_modules(self):
        '''
        Return available TTS modules.
        '''
        return self._tts.modules()

    def initialize():
        # Create config dir if it does not exist yet
        if not os.path.exists(jasperpath.CONFIG_PATH):
            try:
                os.makedirs(jasperpath.CONFIG_PATH)
            except OSError:
                self._logger.error("Could not create config dir: '%s'",
                                   jasperpath.CONFIG_PATH, exc_info=True)
                raise

        # Check if config dir is writable
        if not os.access(jasperpath.CONFIG_PATH, os.W_OK):
            self._logger.critical("Config dir %s is not writable. Jessy won't work correctly.",
                                  jasperpath.CONFIG_PATH)

        # FIXME: For backwards compatibility, move old config file to newly
        #        created config dir
        old_configfile = os.path.join(jasperpath.LIB_PATH, 'profile.yml')
        new_configfile = jasperpath.config('profile.yml')
        if os.path.exists(old_configfile):
            if os.path.exists(new_configfile):
                self._logger.warning("Deprecated profile file found: '%s'. " +
                                     "Please remove it.", old_configfile)
            else:
                self._logger.warning("Deprecated profile file found: '%s'. " +
                                     "Trying to copy it to new location '%s'.",
                                     old_configfile, new_configfile)
                try:
                    shutil.copy2(old_configfile, new_configfile)
                except shutil.Error:
                    self._logger.error("Unable to copy config file. " +
                                       "Please copy it manually.",
                                       exc_info=True)
                    raise

        # Read config
        self._logger.debug("Trying to read config file: '%s'", new_configfile)
        try:
            with open(new_configfile, "r") as f:
                self.config = yaml.safe_load(f)
        except OSError:
            self._logger.error("Can't open config file: '%s'", new_configfile)
            raise

        try:
            stt_engine_slug = self.config['stt_engine']
        except KeyError:
            stt_engine_slug = 'sphinx'
            logger.warning("stt_engine not specified in profile, defaulting " +
                           "to '%s'", stt_engine_slug)
        stt_engine_class = stt.get_engine_by_slug(stt_engine_slug)

        try:
            slug = self.config['stt_passive_engine']
            stt_passive_engine_class = stt.get_engine_by_slug(slug)
        except KeyError:
            stt_passive_engine_class = stt_engine_class

        try:
            tts_engine_slug = self.config['tts_engine']
        except KeyError:
            tts_engine_slug = tts.get_default_engine_slug()
            logger.warning("tts_engine not specified in profile, defaulting " +
                           "to '%s'", tts_engine_slug)
        tts_engine_class = tts.get_engine_by_slug(tts_engine_slug)

        # Initialize Mic
        self.mic = Mic(tts_engine_class.get_instance(),
                       stt_passive_engine_class.get_passive_instance(),
                       stt_engine_class.get_active_instance())
        return self

    def run(self):
        if 'first_name' in self.config:
            salutation = "Hey, {0}. Glad to see you. How can I help you?".format(self.config["first_name"])
        else:
            salutation = "How can I help you?"
        self.mic.say(salutation)

        Conversation(self.config.get('persona', 'jasper').upper(),
                     self.mic, self.config).handleForever()


if __name__ == "__main__":
    logging.basicConfig()
    logger = logging.getLogger()
    logger.getChild("jessy.stt").setLevel(logging.INFO)

    if args.debug:
        logger.setLevel(logging.DEBUG)

    if not args.no_network_check and not diagnose.check_network_connection():
        logger.warning("Network not connected. This may prevent Jessy from running properly.")

    if args.diagnose:
        failed_checks = diagnose.run()
        sys.exit(0 if not failed_checks else 1)

    try:
        jessy = Jessy()
        if args.run:
            jessy.initialize().run()
        else:
            if args.stt:
                print "Available STT engines:\n"
                for mod in jessy.get_stt_modules():
                    print "  ", mod
                print

            if args.tts:
                print "Available TTS engines:\n"
                for mod in jessy.get_tts_modules():
                    print "  ", mod
            else:
                print "Error: try --help for usage"

    except Exception:
        logger.error("Error occured!", exc_info=True)
        sys.exit(1)
